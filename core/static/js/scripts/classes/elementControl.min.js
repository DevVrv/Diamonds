"use strict";class ElementsControl{constructor(params){void 0!==params.parent&&"string"==typeof params.parent?this.parent=document.querySelector(params.parent):this.parent=params.parent||document,"string"==typeof params.manager?this.manager=this.parent.querySelectorAll(params.manager):this.manager=params.manager,"string"==typeof params.managed?this.managed=this.parent.querySelectorAll(params.managed):this.managed=params.managed,this.active=params.active||"active",this.debug=params.debug,!0===this.debug&&this.debuging()}getElement(selector,parent=document){let items;return parent.querySelectorAll(selector)}clearClass(elems,notThis,name=this.active){elems.forEach((elem,i)=>{i!==notThis&&elem.classList.contains(name)&&elem.classList.remove(name)})}debuging(){console.log(this)}cleanClass(){for(let i=0;i<this.manager.length;i++)this.manager[i].classList.remove(this.active),this.managed[i].classList.remove(this.active)}toggler(params){this.notThis=void 0,void 0!==params&&void 0!==params.notThis&&("string"==typeof params.notThis?this.notThis=this.parent.querySelectorAll(params.notThis):"object"==typeof params.notThis&&(this.notThis=params.notThis));for(let i=0;i<this.manager.length;i++)this.manager[i].onclick=e=>{void 0!==params&&!0===params.single&&(this.clearClass(this.manager,i),this.clearClass(this.managed,i)),void 0!==this.notThis?e.target!==this.notThis[i]&&e.target.parentElement!==this.notThis[i]&&(this.manager[i].classList.toggle(this.active),this.managed[i].classList.toggle(this.active)):(this.manager[i].classList.toggle(this.active),this.managed[i].classList.toggle(this.active)),!0===this.debug&&this.debuging()};return this}singleToggler(){for(let i=0;i<this.manager.length;i++)this.manager[i].addEventListener("click",()=>{this.manager[i].classList.toggle(this.active),!0===this.debug&&this.debuging()});return this}switcher(){let manager=this.manager[0],row1=this.managed[0],row2=this.managed[1];return manager.onclick=()=>{row1.classList.contains(this.active)?(manager.classList.add(this.active),row1.classList.remove(this.active),row2.classList.add(this.active)):row1.classList.contains(this.active)||(manager.classList.remove(this.active),row1.classList.add(this.active),row2.classList.remove(this.active))},this}jump(pos="afterbegin"){for(let i=0;i<this.manager.length;i++)this.managed[0].insertAdjacentElement(pos,this.manager[i])}screen(func,brace=768){return this.width=document.documentElement.getBoundingClientRect().width,this.width<=brace&&func(),this}screen2(func,brace=768){return this.width=document.documentElement.getBoundingClientRect().width,this.width,this}label(checked=Function,unchecked=Function){for(let i=0;i<this.manager.length;i++)this.manager[i].onclick=()=>{if(this.managed[i].checked){this.managed[i].checked=!1,this.manager[i].classList.toggle(this.active);const name=this.managed[i].getAttribute("name");unchecked&&unchecked(name)}else if(!this.managed[i].checked){this.managed[i].checked=!0,this.manager[i].classList.toggle(this.active);const value=this.managed[i].getAttribute("name");checked&&checked(value)}return!0===this.debug&&this.debuging(),this}}sort(name1="active-1",name2="active-2"){for(let i=0;i<this.manager.length;i++)this.manager[i].addEventListener("click",()=>{this.clearClass(this.manager,i,name1),this.clearClass(this.manager,i,name2),this.manager[i].classList.contains(name1)||this.manager[i].classList.contains(name2)?this.manager[i].classList.contains(name1)?(this.manager[i].classList.remove(name1),this.manager[i].classList.add(name2)):this.manager[i].classList.contains(name2)&&this.manager[i].classList.remove(name2):this.manager[i].classList.add(name1)})}}